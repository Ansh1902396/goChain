#!/bin/bash

# RuddyChain - Flexible Blockchain Node Manager
# Usage: ruddychain [command] [options]

# Default configuration
DEFAULT_CHAIN_NAME="ruddychain"
DEFAULT_AUTHPASS="password123"
DEFAULT_OWNERPASS="password123"
DEFAULT_BALANCE=1000
DEFAULT_BOOTSTRAP_PORT=8000
CONFIG_DIR="$HOME/.ruddychain"
NODES_DIR="$CONFIG_DIR/nodes"
BINARY_NAME="bcn"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Create config directory if it doesn't exist
mkdir -p "$NODES_DIR"

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Check if binary exists in current directory or PATH
find_binary() {
    if [ -f "./bcn" ]; then
        echo "./bcn"
    elif command -v bcn &> /dev/null; then
        echo "bcn"
    else
        return 1
    fi
}

# Check if port is available
is_port_free() {
    local port="$1"
    ! lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1
}

# Find next available port starting from a base port
find_free_port() {
    local base_port="${1:-8000}"
    local port=$base_port
    while ! is_port_free $port; do
        ((port++))
    done
    echo $port
}

# Kill process on port
kill_port() {
    local port="$1"
    local pids=$(lsof -ti:$port 2>/dev/null)
    if [ -n "$pids" ]; then
        echo $pids | xargs kill -9 2>/dev/null || true
        sleep 1
    fi
}

# Save node configuration
save_node_config() {
    local name="$1"
    local port="$2"
    local chain="$3"
    local type="$4"
    local pid="$5"
    local seed="$6"
    
    cat > "$NODES_DIR/$name.conf" << EOF
NODE_NAME="$name"
NODE_PORT="$port"
CHAIN_NAME="$chain"
NODE_TYPE="$type"
NODE_PID="$pid"
SEED_ADDR="$seed"
CREATED_AT="$(date)"
EOF
}

# Load node configuration
load_node_config() {
    local name="$1"
    local config_file="$NODES_DIR/$name.conf"
    
    if [ -f "$config_file" ]; then
        source "$config_file"
        return 0
    else
        return 1
    fi
}

# Start a new bootstrap node
start_bootstrap() {
    local name="${1:-bootstrap}"
    local port="${2:-$(find_free_port $DEFAULT_BOOTSTRAP_PORT)}"
    local chain="${3:-$DEFAULT_CHAIN_NAME}"
    
    log_step "Starting bootstrap node '$name' on port $port..."
    
    # Check if node already exists
    if load_node_config "$name"; then
        if kill -0 "$NODE_PID" 2>/dev/null; then
            log_warning "Bootstrap node '$name' is already running on port $NODE_PORT (PID: $NODE_PID)"
            return 1
        else
            log_info "Cleaning up stale configuration for '$name'"
            rm -f "$NODES_DIR/$name.conf"
        fi
    fi
    
    # Check if port is free
    if ! is_port_free "$port"; then
        log_error "Port $port is already in use!"
        return 1
    fi
    
    # Find binary
    local binary=$(find_binary)
    if [ $? -ne 0 ]; then
        log_error "Blockchain binary 'bcn' not found! Make sure you've built the project."
        return 1
    fi
    
    # Create data directories
    local keystore_dir="$CONFIG_DIR/keystore_${name}_${port}"
    local blockstore_dir="$CONFIG_DIR/blockstore_${name}_${port}"
    
    # Only clean blockstore, keep keystore if it exists
    rm -rf "$blockstore_dir" 2>/dev/null || true
    mkdir -p "$keystore_dir" "$blockstore_dir"
    
    # Function to attempt starting the node
    attempt_start() {
        log_info "Attempting to start bootstrap node with chain: $chain"
        $binary node start \
            --node "localhost:$port" \
            --bootstrap \
            --chain "$chain" \
            --authpass "$DEFAULT_AUTHPASS" \
            --ownerpass "$DEFAULT_OWNERPASS" \
            --balance $DEFAULT_BALANCE \
            --keystore "$keystore_dir" \
            --blockstore "$blockstore_dir" \
            > "$CONFIG_DIR/${name}.log" 2>&1 &
        
        local pid=$!
        
        # Wait and check if the process started successfully
        sleep 3
        if kill -0 $pid 2>/dev/null; then
            save_node_config "$name" "$port" "$chain" "bootstrap" "$pid" ""
            log_success "✅ Bootstrap node '$name' started successfully!"
            log_info "   Port: $port"
            log_info "   Chain: $chain"
            log_info "   PID: $pid"
            log_info "   Logs: $CONFIG_DIR/${name}.log"
            return 0
        else
            log_warning "First attempt failed, checking for keystore creation..."
            return 1
        fi
    }
    
    # First attempt
    if attempt_start; then
        return 0
    fi
    
    # Check if keystore was created and retry
    if [ "$(ls -A "$keystore_dir" 2>/dev/null)" ]; then
        log_info "Keystore was created, retrying bootstrap node startup..."
        sleep 2
        if attempt_start; then
            return 0
        fi
    fi
    
    log_error "❌ Failed to start bootstrap node '$name'"
    log_info "Check logs: cat $CONFIG_DIR/${name}.log"
    cat "$CONFIG_DIR/${name}.log" | tail -5
    return 1
}

# Start a regular node
start_node() {
    local name="${1:-node1}"
    local port="${2:-$(find_free_port 8001)}"
    local seed="${3:-}"
    local chain="${4:-$DEFAULT_CHAIN_NAME}"
    
    # If no seed provided, try to find a bootstrap node
    if [ -z "$seed" ]; then
        for config in "$NODES_DIR"/*.conf; do
            if [ -f "$config" ]; then
                source "$config"
                if [ "$NODE_TYPE" = "bootstrap" ] && kill -0 "$NODE_PID" 2>/dev/null; then
                    seed="localhost:$NODE_PORT"
                    log_info "Found running bootstrap node: $seed"
                    break
                fi
            fi
        done
        
        if [ -z "$seed" ]; then
            log_error "No seed address provided and no running bootstrap node found!"
            log_info "Start a bootstrap node first or provide --seed address"
            return 1
        fi
    fi
    
    log_step "Starting regular node '$name' on port $port..."
    
    # Check if node already exists
    if load_node_config "$name"; then
        if kill -0 "$NODE_PID" 2>/dev/null; then
            log_warning "Node '$name' is already running on port $NODE_PORT (PID: $NODE_PID)"
            return 1
        else
            log_info "Cleaning up stale configuration for '$name'"
            rm -f "$NODES_DIR/$name.conf"
        fi
    fi
    
    # Check if port is free
    if ! is_port_free "$port"; then
        log_error "Port $port is already in use!"
        return 1
    fi
    
    # Find binary
    local binary=$(find_binary)
    if [ $? -ne 0 ]; then
        log_error "Blockchain binary 'bcn' not found! Make sure you've built the project."
        return 1
    fi
    
    # Create data directories
    local keystore_dir="$CONFIG_DIR/keystore_${name}_${port}"
    local blockstore_dir="$CONFIG_DIR/blockstore_${name}_${port}"
    
    rm -rf "$keystore_dir" "$blockstore_dir" 2>/dev/null || true
    mkdir -p "$keystore_dir" "$blockstore_dir"
    
    # Start the node
    log_info "Starting regular node with seed: $seed, chain: $chain"
    nohup $binary node start \
        --node "localhost:$port" \
        --seed "$seed" \
        --chain "$chain" \
        --ownerpass "$DEFAULT_OWNERPASS" \
        --balance $DEFAULT_BALANCE \
        --keystore "$keystore_dir" \
        --blockstore "$blockstore_dir" \
        > "$CONFIG_DIR/${name}.log" 2>&1 &
    
    local pid=$!
    
    # Wait and check if the process started successfully
    sleep 3
    if kill -0 $pid 2>/dev/null; then
        save_node_config "$name" "$port" "$chain" "regular" "$pid" "$seed"
        log_success "✅ Regular node '$name' started successfully!"
        log_info "   Port: $port"
        log_info "   Chain: $chain"
        log_info "   Seed: $seed"
        log_info "   PID: $pid"
        log_info "   Logs: $CONFIG_DIR/${name}.log"
    else
        log_error "❌ Failed to start regular node '$name'"
        cat "$CONFIG_DIR/${name}.log"
        return 1
    fi
}

# Stop a node by name
stop_node() {
    local name="$1"
    
    if ! load_node_config "$name"; then
        log_error "Node '$name' not found!"
        return 1
    fi
    
    if kill -0 "$NODE_PID" 2>/dev/null; then
        log_step "Stopping node '$name' (PID: $NODE_PID)..."
        kill "$NODE_PID"
        sleep 2
        
        # Force kill if still running
        if kill -0 "$NODE_PID" 2>/dev/null; then
            kill -9 "$NODE_PID" 2>/dev/null || true
        fi
        
        # Clean up port
        kill_port "$NODE_PORT"
        
        # Remove config
        rm -f "$NODES_DIR/$name.conf"
        
        log_success "✅ Node '$name' stopped successfully!"
    else
        log_warning "Node '$name' is not running"
        rm -f "$NODES_DIR/$name.conf"
    fi
}

# List all nodes
list_nodes() {
    log_step "Listing all blockchain nodes..."
    echo ""
    printf "%-15s %-8s %-12s %-10s %-8s %-20s\n" "NAME" "PORT" "CHAIN" "TYPE" "STATUS" "SEED"
    printf "%-15s %-8s %-12s %-10s %-8s %-20s\n" "----" "----" "-----" "----" "------" "----"
    
    local found_nodes=false
    for config in "$NODES_DIR"/*.conf; do
        if [ -f "$config" ]; then
            found_nodes=true
            source "$config"
            local status="DEAD"
            if kill -0 "$NODE_PID" 2>/dev/null; then
                status="RUNNING"
            fi
            
            local display_seed="${SEED_ADDR:-N/A}"
            if [ ${#display_seed} -gt 18 ]; then
                display_seed="${display_seed:0:15}..."
            fi
            
            printf "%-15s %-8s %-12s %-10s %-8s %-20s\n" \
                "$NODE_NAME" "$NODE_PORT" "$CHAIN_NAME" "$NODE_TYPE" "$status" "$display_seed"
        fi
    done
    
    if [ "$found_nodes" = false ]; then
        echo "No nodes found."
    fi
    echo ""
}

# Show logs for a node
show_logs() {
    local name="$1"
    local lines="${2:-50}"
    
    if ! load_node_config "$name"; then
        log_error "Node '$name' not found!"
        return 1
    fi
    
    local log_file="$CONFIG_DIR/${name}.log"
    if [ -f "$log_file" ]; then
        log_info "Showing last $lines lines of logs for '$name':"
        echo "----------------------------------------"
        tail -n "$lines" "$log_file"
        echo "----------------------------------------"
    else
        log_error "Log file not found for node '$name'"
    fi
}

# Clean up all stopped nodes
cleanup() {
    log_step "Cleaning up stopped nodes..."
    local cleaned=0
    
    for config in "$NODES_DIR"/*.conf; do
        if [ -f "$config" ]; then
            source "$config"
            if ! kill -0 "$NODE_PID" 2>/dev/null; then
                log_info "Removing stale config for '$NODE_NAME'"
                rm -f "$config"
                ((cleaned++))
            fi
        fi
    done
    
    log_success "Cleaned up $cleaned stale configurations"
}

# Stop all nodes
stop_all() {
    log_step "Stopping all nodes..."
    
    for config in "$NODES_DIR"/*.conf; do
        if [ -f "$config" ]; then
            source "$config"
            if kill -0 "$NODE_PID" 2>/dev/null; then
                log_info "Stopping '$NODE_NAME'..."
                kill "$NODE_PID" 2>/dev/null || true
                kill_port "$NODE_PORT"
            fi
            rm -f "$config"
        fi
    done
    
    log_success "All nodes stopped"
}

# Show help
show_help() {
    cat << EOF
🔗 RuddyChain - Flexible Blockchain Node Manager

Usage: ruddychain [COMMAND] [OPTIONS]

Commands:
  bootstrap [name] [port] [chain]    Start a bootstrap node
  node [name] [port] [seed] [chain]  Start a regular node
  stop <name>                        Stop a specific node
  stop-all                          Stop all nodes
  list                              List all nodes
  logs <name> [lines]               Show logs for a node
  cleanup                           Remove stale configurations
  status                            Show overall status
  help                              Show this help

Examples:
  ruddychain bootstrap                           # Start bootstrap on auto port
  ruddychain bootstrap main 8000                # Start bootstrap 'main' on port 8000
  ruddychain bootstrap main 8000 mychain        # Start with custom chain name
  
  ruddychain node                                # Start node (auto-detects bootstrap)
  ruddychain node worker1 8001                  # Start 'worker1' on port 8001
  ruddychain node worker2 8002 localhost:8000   # Start with specific seed
  
  ruddychain list                                # List all nodes
  ruddychain logs main                           # Show logs for 'main' node
  ruddychain stop worker1                        # Stop 'worker1' node
  ruddychain stop-all                            # Stop all nodes

Configuration:
  Config Directory: $CONFIG_DIR
  Default Chain: $DEFAULT_CHAIN_NAME
  Default Passwords: $DEFAULT_AUTHPASS / $DEFAULT_OWNERPASS
  Default Balance: $DEFAULT_BALANCE

Notes:
  - Node names must be unique
  - Ports are auto-assigned if not specified
  - Bootstrap nodes act as seed nodes for regular nodes
  - Data is stored in separate directories per node
EOF
}

# Show status
show_status() {
    log_step "RuddyChain Status"
    echo ""
    
    # Check if binary exists
    local binary=$(find_binary)
    if [ $? -eq 0 ]; then
        log_info "Binary: $binary ✅"
    else
        log_error "Binary: bcn not found ❌"
    fi
    
    # Show config directory
    log_info "Config: $CONFIG_DIR"
    
    # Count nodes
    local total_nodes=0
    local running_nodes=0
    local bootstrap_nodes=0
    
    for config in "$NODES_DIR"/*.conf; do
        if [ -f "$config" ]; then
            source "$config"
            ((total_nodes++))
            if [ "$NODE_TYPE" = "bootstrap" ]; then
                ((bootstrap_nodes++))
            fi
            if kill -0 "$NODE_PID" 2>/dev/null; then
                ((running_nodes++))
            fi
        fi
    done
    
    echo ""
    log_info "Total Nodes: $total_nodes"
    log_info "Running Nodes: $running_nodes"
    log_info "Bootstrap Nodes: $bootstrap_nodes"
    
    if [ $total_nodes -gt 0 ]; then
        echo ""
        list_nodes
    fi
}

# Main command processing
case "${1:-help}" in
    "bootstrap")
        start_bootstrap "$2" "$3" "$4"
        ;;
    "node")
        start_node "$2" "$3" "$4" "$5"
        ;;
    "stop")
        if [ -z "$2" ]; then
            log_error "Please specify node name to stop"
            exit 1
        fi
        stop_node "$2"
        ;;
    "stop-all")
        stop_all
        ;;
    "list")
        list_nodes
        ;;
    "logs")
        if [ -z "$2" ]; then
            log_error "Please specify node name for logs"
            exit 1
        fi
        show_logs "$2" "$3"
        ;;
    "cleanup")
        cleanup
        ;;
    "status")
        show_status
        ;;
    "help"|*)
        show_help
        ;;
esac
